local lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
    -- Prevent LSP preview window from opening on omnifunc
    vim.cmd [[set completeopt-=preview]]

    client.resolved_capabilities.document_formatting = false

    local function buf_set_keymap(...)
        vim.api.nvim_buf_set_keymap(bufnr, ...)
    end
    local function buf_set_option(...)
        vim.api.nvim_buf_set_option(bufnr, ...)
    end

    -- Enable completion triggered by <c-x><c-o>
    buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

    -- Mappings.
    local opts = {noremap = true, silent = true}

    -- See `:help vim.lsp.*` for documentation on any of the below functions
    buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>',
                   opts)
    -- buf_set_keymap('n', '<leader>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
    buf_set_keymap('n', '<leader>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>',
                   opts)
    -- buf_set_keymap('n', '<leader>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
    -- buf_set_keymap('n', '<leader>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
    -- buf_set_keymap('n', '<leader>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
    buf_set_keymap('n', '<leader>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
    buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
    buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>',
                   opts)
    buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>',
                   opts)
    buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
    buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
    buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
    buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
end

local servers = {
    gopls = nil,
    pyright = nil,
    rust_analyzer = nil,
    sumneko_lua = nil,
    tsserver = nil,
    yamlls = nil,
    zls = nil
}

local sumneko_root_path = os.getenv("SUMNEKO_ROOT_PATH")
if sumneko_root_path ~= nil then
    servers.sumneko_lua = {
        cmd = {
            sumneko_root_path .. "/bin/lua-language-server", "-E",
            sumneko_root_path .. "/extras/main.lua"
        },
        on_attach = on_attach,
        settings = {Lua = {diagnostics = {globals = {"vim"}}}},
        flags = {debounce_text_changes = 150},
        telemetry = {enable = false}
    }
end

local default_config = {
    on_attach = on_attach,
    flags = {debounce_text_changes = 150}
}

for name, custom_config in pairs(servers) do
    if custom_config ~= nil then
        lsp[name].setup(custom_config)
    else
        lsp[name].setup(default_config)
    end
end

local efm_languages = {
    go = {{formatCommand = "goimports", formatStdin = true}},
    lua = {{formatCommand = "lua-format -i", formatStdin = true}},
    nix = {{formatCommand = "nixpkgs-fmt", formatStdin = true}},
    python = {{formatCommand = "black --quiet -", formatStdin = true}},
    rust = {
        {
            formatCommand = 'rustfmt --emit stdout -q "${INPUT}"',
            formatStdin = true
        }
    },
    sh = {{formatCommand = "shfmt -ci -s -bn", formatStdin = true}},
    typescript = {
        {formatCommand = "prettier --parser=typescript", formatStdin = true}
    }
}

lsp.efm.setup {
    on_attach = function()
        vim.cmd [[
          augroup Format
            au! * <buffer>
            au BufWritePre <buffer> lua vim.lsp.buf.formatting_sync(nil, 1000)
          augroup END
        ]]
    end,
    init_options = {documentFormatting = true},
    settings = {rootMarkers = {".git/"}, languages = efm_languages},
    filetypes = vim.tbl_keys(efm_languages)
}

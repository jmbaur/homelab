vim9script

set autoread
set background=dark
set colorcolumn=80
set grepprg=rg\ --vimgrep\ --ignore-case
set hidden
set hlsearch
set ignorecase smartcase
set laststatus=2
set noswapfile
set nowrap
set number relativenumber
set ruler
set showcmd
set showmatch
set splitbelow splitright
set statusline=%<%f\ %h%m%r%{FugitiveStatusline()}%=%-14.(%l,%c%V%)\ %P
set title
set wildoptions=pum,tagfile

colorscheme lunaperche

# Make trailing whitespace standout.
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

g:mapleader = " "
g:dispatch_no_tmux_make = 1

nnoremap - <cmd>Dir<enter>
nnoremap <leader>b <cmd>call fzf#vim#buffers("", { "placeholder": "{1}", "window": "bot new" })<enter>
nnoremap <leader>f <cmd>call fzf#vim#files("", {"source": "fd --hidden --type file", "window": "bot new"})<enter>
nnoremap <leader>g <cmd>call fzf#vim#grep2("rg --column --line-number --no-heading --color=always --smart-case -- ", "", {"window": "bot new"})<enter>

# Make 'Y' behave similarly to 'C', 'D', and others
nnoremap Y y$

def! g:Osc52Copy(content: list<string>)
	var osc52_content = printf(
		"\x1b]52;c;%s\x07",
		base64_encode(str2blob(content)),
	)

	if writefile([osc52_content], "/dev/fd/2", "b") != 0
		echo "failed to copy with osc52"
	endif
enddef

def Osc52()
	# If we are not copying to the unnamed register (as indicated by the
	# empty string), don't do anything.
	if v:event.regname != ""
		return
	endif

	g:Osc52Copy(v:event.regcontents)
enddef

autocmd_add([{
	replace: true,
	group: "Osc52",
	event: "TextYankPost",
	pattern: "*",
	cmd: "Osc52()"
}])

autocmd_add([{
    replace: true,
    group: "NewTerminal",
    event: "TerminalWinOpen",
    pattern: "*",
    cmd: "setlocal nospell nonumber norelativenumber signcolumn=no",
}])

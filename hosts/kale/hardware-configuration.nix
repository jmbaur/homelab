# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [
      (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "usb_storage" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    {
      device = "/dev/disk/by-uuid/7bdaa893-23f2-43d0-b14e-676b1af96790";
      fsType = "btrfs";
      options = [ "subvol=@" "noatime" "discard=async" "compress=zstd" ];
    };

  boot.initrd.luks.devices."cryptroot".device = "/dev/disk/by-uuid/12ff8ac9-228d-42ab-9eb0-d8b3c21e5e2e";

  fileSystems."/nix" =
    {
      device = "/dev/disk/by-uuid/7bdaa893-23f2-43d0-b14e-676b1af96790";
      fsType = "btrfs";
      options = [ "subvol=@nix" "noatime" "discard=async" "compress=zstd" ];
    };

  fileSystems."/var" =
    {
      device = "/dev/disk/by-uuid/7bdaa893-23f2-43d0-b14e-676b1af96790";
      fsType = "btrfs";
      options = [ "subvol=@var" "noatime" "discard=async" "compress=zstd" ];
    };

  fileSystems."/home" =
    {
      device = "/dev/disk/by-uuid/7bdaa893-23f2-43d0-b14e-676b1af96790";
      fsType = "btrfs";
      options = [ "subvol=@home" "noatime" "discard=async" "compress=zstd" ];
    };

  fileSystems."/boot" =
    {
      device = "/dev/disk/by-uuid/5A2B-677E";
      fsType = "vfat";
    };

  swapDevices = [ ];
  zramSwap.enable = true;

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eth0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "aarch64-linux";
}
